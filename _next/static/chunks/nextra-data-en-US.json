{"/Getting-Started/Installation.html":{"title":"Installation","data":{"":"Run one of the following commands to add it to your project.\n$ pnpm add pocko-ui\n$ npm i pocko-ui"}},"/Getting-Started/Usage.html":{"title":"Usage","data":{"":"Step 1.Using Bootstrap CSS together (recommended)Download bootstrap\n<link href=\"./bootstrap.min.css\" rel=\"stylesheet\" />\nStep 2.import required components as requiredIf the component does not have a CSS file, it can not be imported, or use own CSS.\nimport Input from \"pocko-ui/Input\";\r\nimport SelectInput from \"pocko-ui/SelectInput\";\r\nimport \"pocko-ui/SelectInput/index.css\";"}},"/":{"title":"Index","data":{"pocko-ui#Pocko-UI":"React components using pure Bootstrap 5+ which has undergone complex business testing and is easy to integrate with any API. You can load Bootstrap css libraries separately in your project.All components have undergone complex business verification and provide multiple examples.","key-features#Key Features":"Simplify the assignment method of diversified data.\nDo not embed css-in-js, directly use external CSS styles to completely change the component style."}},"/Forms/Checkbox.html":{"title":"Checkbox","data":{"general#General":"Checkbox\r\nUsed for selecting multiple values from several options.\nShow Code\nimport React from \"react\";\r\nimport Checkbox from \"pocko-ui/Checkbox\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n      <Checkbox\r\n        id=\"demo1\"\r\n        name=\"demo1name\"\r\n        value=\"123\"\r\n        label=\"Label\"\r\n        onChange={(arg1: any, arg2: any) => {\r\n            console.log(arg1, arg2);\r\n        }}\r\n      />\r\n\r\n      <Checkbox\r\n        id=\"demo1.1\"\r\n        name=\"demo1.1name\"\r\n        value=\"123\"\r\n        label=\"Label\"\r\n        onChange={(arg1: any, arg2: any) => {\r\n            console.log(arg1, arg2);\r\n        }}\r\n        checked\r\n      />\r\n\r\n      <Checkbox\r\n        id=\"demo1.2\"\r\n        name=\"demo1.2name\"\r\n        value=\"123\"\r\n        label=\"Label\"\r\n        onChange={(arg1: any, arg2: any) => {\r\n            console.log(arg1, arg2);\r\n        }}\r\n        disabled\r\n      />\r\n  </div>\r\n);","no-spacing#No spacing":"Show Code\nimport React from \"react\";\r\nimport Checkbox from \"pocko-ui/Checkbox\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n      <Checkbox\r\n        id=\"demo1\"\r\n        name=\"demo1name\"\r\n        value=\"123\"\r\n        label=\"Label\"\r\n        onChange={(arg1: any, arg2: any) => {\r\n            console.log(arg1, arg2);\r\n        }}\r\n        wrapperClassName=\"m-0\"\r\n      />\r\n\r\n      <Checkbox\r\n        id=\"demo1.1\"\r\n        name=\"demo1.1name\"\r\n        value=\"123\"\r\n        label=\"Label\"\r\n        onChange={(arg1: any, arg2: any) => {\r\n            console.log(arg1, arg2);\r\n        }}\r\n        wrapperClassName=\"m-0\"\r\n        checked\r\n      />\r\n  </div>\r\n);","using-contentref-to-control-the-checkbox-component#Using contentRef to Control the Checkbox Component":"Show Code\nimport React from \"react\";\r\nimport Checkbox from \"pocko-ui/Checkbox\";\r\n\r\nconst checkboxRef = useRef<any>(null);\r\n\r\n// Function to set the checkbox to checked\r\nconst handleSetCheckbox = () => {\r\n  checkboxRef.current.set(true); // Set checkbox to checked\r\n};\r\n\r\n// Function to clear the checkbox (set it to unchecked)\r\nconst handleClearCheckbox = () => {\r\n  checkboxRef.current.clear(); // Clear checkbox (set it to unchecked)\r\n};\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n      <Checkbox\r\n        contentRef={checkboxRef} // useRef\r\n        value=\"checkbox1\"\r\n        label=\"Control Checkbox Externally\"\r\n      />\r\n\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-sm btn-warning me-2\"\r\n        onClick={handleSetCheckbox}\r\n      >\r\n        Check Checkbox\r\n      </button>\r\n\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-sm btn-danger text-dark\"\r\n        onClick={handleClearCheckbox}\r\n      >\r\n        Uncheck Checkbox\r\n      </button>\r\n  </div>\r\n  );","api#API":"","checkbox#Checkbox":"import Checkbox from \"pocko-ui/Checkbox\";\nProperty\tType\tDefault\tDescription\tRequired\tcontentRef\tReact.ForwardedRef\t-\tAllows external components to operate on the component instance through a ref (e.g., clearing or setting values).\t-\twrapperClassName\tstring\t-\tCustom class name for the control wrapper.\t-\tformCheckClassName\tstring\t-\tCustom class name for the form check box.\t-\tcontrolClassName\tstring\t-\tCustom class name for the checkbox itself.\t-\titemSelectedClassName\tstring\t-\tCustom class name for the selected item.\t-\tvalue\tstring | boolean\t-\tThe value of the control. Can be a string or boolean.\t✔\tlabel\tReact.ReactNode | string\t-\tThe label content on the left of the checkbox. It can be a string or React node.\t-\tid\tstring | number | any\t-\tThe id of the control, used to associate the label and input elements.\t-\tname\tstring | any\t-\tThe name attribute of the control.\t-\tchecked\tboolean\t-\tControls whether the checkbox is checked or not.\t-\tdisabled\tboolean\tfalse\tDisables the checkbox. If set to true, the checkbox cannot be clicked.\t-\tstyle\tReact.CSSProperties\t-\tCustom styles for the checkbox.\t-\tonChange\t(arg_1: any, arg_2: any) => void\t-\tCallback function triggered when the checkbox state changes. It returns the checked state and current value.\t-"}},"/Forms/Radio.html":{"title":"Radio","data":{"general#General":"Radio\r\nUsed to select a single state from multiple options.\nShow Code\nimport React from \"react\"; \r\nimport Radio from \"pocko-ui/Radio\";\r\n\r\nfunction getOptionsChange(val: any, e: any, label: any, index: any) {\r\n  console.log(val, e.target, label, index);\r\n}\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Radio\r\n      id=\"radio1\"\r\n      name=\"radio-1\"\r\n      value=\"value-2\"\r\n      options={[\r\n        { label: \"Option 1\", value: \"value-1\" },\r\n        {\r\n          label: \"<del style=color:red>deprecate</del>Option 2\",\r\n          value: \"value-2\",\r\n        },\r\n        {\r\n          label: \"Option 3\",\r\n          value: \"value-3\",\r\n          customAttr1: \"attr1\",\r\n          customAttr2: \"attr2\",\r\n        },\r\n      ]}\r\n      onChange={getOptionsChange}\r\n    />\r\n\r\n    <Radio\r\n      id=\"radio2\"\r\n      name=\"radio-2\"\r\n      value=\"value-2\"\r\n      options={[\r\n        { label: \"Option 1\", value: \"value-1\" },\r\n        {\r\n          label: \"<del style=color:red>deprecate</del>Option 2\",\r\n          value: \"value-2\",\r\n        },\r\n        {\r\n          label: \"Option 3\",\r\n          value: \"value-3\",\r\n          customAttr1: \"attr1\",\r\n          customAttr2: \"attr2\",\r\n        },\r\n      ]}\r\n      onChange={getOptionsChange}\r\n      wrapperClassName=\"d-flex align-items-center gap-2\"\r\n    />\r\n\r\n    <Radio\r\n      id=\"radio3\"\r\n      name=\"radio-3\"\r\n      value=\"value-1\"\r\n      options={[\r\n        { label: \"Option 1\", value: \"value-1\" },\r\n        {\r\n          label: \"<del style=color:red>deprecate</del>Option 2\",\r\n          value: \"value-2\",\r\n        },\r\n        {\r\n          label: \"Option 3\",\r\n          value: \"value-3\",\r\n          customAttr1: \"attr1\",\r\n          customAttr2: \"attr2\",\r\n          disabled: true,\r\n        },\r\n      ]}\r\n      onChange={getOptionsChange}\r\n      wrapperClassName=\"d-flex align-items-center gap-2\"\r\n    />\r\n  </div>\r\n);","using-contentref-to-control-the-radio-component#Using contentRef to Control the Radio Component":"Show Code\n\r\nimport React from \"react\"; \r\nimport Radio from \"pocko-ui/Radio\";\r\n\r\nconst radioRef = useRef<any>(null);\r\n\r\nfunction getOptionsChange(val: any, e: any, label: any, index: any) {\r\n  console.log(val, e.target, label, index);\r\n}\r\n\r\nconst handleSetCheckbox = () => {\r\n  radioRef.current.set(\"value-1\");\r\n};\r\n\r\nconst handleClearCheckbox = () => {\r\n  radioRef.current.clear();\r\n};\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Radio\r\n      contentRef={radioRef}\r\n      id=\"radio1\"\r\n      name=\"radio-1\"\r\n      value=\"value-2\"\r\n      options={[\r\n        { label: \"Option 1\", value: \"value-1\" },\r\n        {\r\n          label: \"<del style=color:red>deprecate</del>Option 2\",\r\n          value: \"value-2\",\r\n        },\r\n        {\r\n          label: \"Option 3\",\r\n          value: \"value-3\",\r\n          customAttr1: \"attr1\",\r\n          customAttr2: \"attr2\",\r\n        },\r\n      ]}\r\n      onChange={getOptionsChange}\r\n    />\r\n\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-sm btn-warning me-2\"\r\n      onClick={handleSetCheckbox}\r\n    >\r\n      Check the First Radio\r\n    </button>\r\n\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-sm btn-danger text-dark\"\r\n      onClick={handleClearCheckbox}\r\n    >\r\n      Uncheck Radio\r\n    </button>\r\n  </div>\r\n);","api#API":"","radio#Radio":"import Radio from \"pocko-ui/Radio\";\nProperty\tType\tDefault\tDescription\tRequired\tcontentRef\tReact.ForwardedRef\t-\tAllows external components to control the radio button's state (e.g., clearing, setting values, etc.).\t-\twrapperClassName\tstring\t-\tCustom class name for the control wrapper.\t-\tformCheckClassName\tstring\t-\tCustom class name for the form check container.\t-\tformCheckLableClassName\tstring\t-\tCustom class name for the label associated with the radio button.\t-\toptions\tOptionConfig[] | string | unknown\t-\tArray of options to render, each with a value, label, and optional disabled property.\t-\tvalue\tstring\t-\tThe value of the selected radio button.\t✔\tid\tstring | number | any\t-\tThe id of the control, used for associating the radio button with its label.\t-\tname\tstring | any`\t-\tThe name attribute of the radio button group.\t-\tonChange\t(arg_1: any, arg_2: any, arg_3?: any, arg_4?: any) => void\t-\tCallback function triggered when the radio button state changes. Returns the selected value, event, label, and index.\t-"}},"/Forms/Input.html":{"title":"Input","data":{"general#General":"Input\r\nThrough mouse or keyboard input content, it is the most basic form field wrapper.\nShow Code\nimport React from \"react\"; \r\nimport Input from \"pocko-ui/Input\";\r\n\r\nconst inputFocusRef = useRef(null);\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Input label=\"Title\" wrapperClassName=\"mb-1\" />\r\n\r\n    <Input label=\"disabled\" defaultValue={\"disabled\"} wrapperClassName=\"mb-1\" disabled />\r\n\r\n    <Input label=\"number\" type=\"number\" wrapperClassName=\"mb-1\" />\r\n\r\n    <Input\r\n      inputRef={inputFocusRef}\r\n      label={\r\n        <>\r\n          <button\r\n            className=\"btn btn-sm btn-primary\"\r\n            onClick={() => {\r\n              if (inputFocusRef.current) inputFocusRef.current.focus();\r\n            }}\r\n          >\r\n            ref focus\r\n          </button>\r\n        </>\r\n      }\r\n      iconLeft={<i className=\"fa-solid fa-left-long\"></i>}\r\n      iconRight={<i className=\"fa-solid fa-right-long\"></i>}\r\n      wrapperClassName=\"mb-1\"\r\n    />\r\n  </div>\r\n);","no-spacing#No spacing":"Show Code\nimport React from \"react\"; \r\nimport Input from \"pocko-ui/Input\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Input defaultValue={'no-spacing'} wrapperClassName=\"\" />\r\n\r\n    <Input defaultValue={'no-spacing'} wrapperClassName=\"position-relative\" />\r\n  </div>\r\n);","date-or-datetime#Date or DateTime":"Show Code\nimport React from \"react\"; \r\nimport Input from \"pocko-ui/Input\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Input label=\"Date\" type=\"date\" wrapperClassName=\"mb-2\" />\r\n\r\n    <Input label='DateTime' type=\"datetime-local\" wrapperClassName=\"mb-2\" />\r\n\r\n    <Input label=\"Time\" type=\"time\" wrapperClassName=\"mb-2\" />\r\n  </div>\r\n);","keyboard-control#Keyboard Control":"Show Code\nimport React from \"react\"; \r\nimport Input from \"pocko-ui/Input\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Input\r\n      label=\"Ctrl Pressed\"\r\n      type=\"text\"\r\n      onPressEnter={(item: any) => {\r\n        if (item.key == \"Control\") {\r\n          alert(\"Ctrl pressed!\");\r\n        }\r\n      }}\r\n    />\r\n  </div>\r\n);","api#API":"","input#Input":"import Input from 'pocko-ui/Input';\nProperty\tType\tDefault\tDescription\tRequired\tinputRef\tany\t-\tA ref object that allows external components to programmatically focus the input field.\t-\tid\tstring\t-\tThe unique identifier for the input field. This is used to target the element in forms or labels.\t-\tname\tstring\t-\tThe name associated with the input field. It is used to reference form data after form submission.\t-\tsize\tstring | number\t-\tDefines the width of the input field. Can be a string (e.g., 'small', 'large') or a number (e.g., 100 for pixel value).\t-\tlabel\tstring | React.ReactNode\t-\tThe label to be displayed for the input field. Can be a string or React component.\t-\tlabelClassName\tstring\t-\tThe class name for the label element. Used to style the label of the input field.\t-\twrapperClassName\tstring\t-\tThe class name for the outer wrapper of the input field.\t-\tcontrolGroupWrapperClassName\tstring\t-\tThe class name for the input group wrapper.\t-\tcontrolGroupTextClassName\tstring\t-\tThe class name for the input group text.\t-\ticonLeft\tReact.ReactNode | string\t-\tThe icon or content to be displayed on the left side of the input field.\t-\ticonRight\tReact.ReactNode | string\t-\tThe icon or content to be displayed on the right side of the input field.\t-\tcontrolClassName\tstring\t-\tThe class name for the input element itself.\t-\ttype\tstring\t\"text\"\tThe type of the input field, such as 'text', 'password', or 'email'.\t-\tdisabled\tboolean\t-\tWhether the input is disabled or not.\t-\treadonly\tboolean\t-\tWhether the input is read-only or not.\t-\trequired\tboolean\t-\tWhether the input is required.\t-\trequiredLabel\tstring | any\t-\tThe label or message to be shown when the input is required.\t-\tdefaultValue\tstring | any\t-\tThe initial value of the input field.\t-\tplaceholder\tstring\t-\tThe placeholder text to be displayed in the input field.\t-\tautoComplete\t\"on\" | \"off\"\t\"on\"\tWhether the input field allows autocomplete. The default is \"on\".\t-\tmin\tnumber\t-\tThe minimum value for input[type=\"number\"].\t-\tmax\tnumber\t-\tThe maximum value for input[type=\"number\"].\t-\tstep\tnumber\t-\tThe step increment for input[type=\"number\"].\t-\tonChange\t(value: string) => void\t-\tThe callback function to be triggered when the value of the input field changes.\t-\tonBlur\t() => void\t-\tThe callback function to be triggered when the input field loses focus.\t-\tonFocus\t() => void\t-\tThe callback function to be triggered when the input field gains focus.\t-\tonPressEnter\tFunction | any\t-\tThe callback function to be triggered when the Enter key is pressed in the input field.\t-"}},"/Other/EmptyNotice.html":{"title":"EmptyNotice","data":{"general#General":"EmptyNotice\r\nEmpty state placeholder.\nShow Code\nimport React from \"react\"; \r\nimport EmptyNotice from \"pocko-ui/EmptyNotice\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <EmptyNotice description={\"暂无数据\"}></EmptyNotice>\r\n  </div>\r\n);","customize-images#Customize Images":"Show Code\nimport React from \"react\"; \r\nimport EmptyNotice from \"pocko-ui/EmptyNotice\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <EmptyNotice\r\n      image={\r\n        <>\r\n          <svg\r\n            height=\"32\"\r\n            aria-hidden=\"true\"\r\n            viewBox=\"0 0 24 24\"\r\n            version=\"1.1\"\r\n            width=\"32\"\r\n            data-view-component=\"true\"\r\n            class=\"octicon octicon-mark-github v-align-middle\"\r\n          >\r\n            <path d=\"M12.5.75C6.146.75 1 5.896 1 12.25c0 5.089 3.292 9.387 7.863 10.91.575.101.79-.244.79-.546 0-.273-.014-1.178-.014-2.142-2.889.532-3.636-.704-3.866-1.35-.13-.331-.69-1.352-1.18-1.625-.402-.216-.977-.748-.014-.762.906-.014 1.553.834 1.769 1.179 1.035 1.74 2.688 1.25 3.349.948.1-.747.402-1.25.733-1.538-2.559-.287-5.232-1.279-5.232-5.678 0-1.25.445-2.285 1.178-3.09-.115-.288-.517-1.467.115-3.048 0 0 .963-.302 3.163 1.179.92-.259 1.897-.388 2.875-.388.977 0 1.955.13 2.875.388 2.2-1.495 3.162-1.179 3.162-1.179.633 1.581.23 2.76.115 3.048.733.805 1.179 1.825 1.179 3.09 0 4.413-2.688 5.39-5.247 5.678.417.36.776 1.05.776 2.128 0 1.538-.014 2.774-.014 3.162 0 .302.216.662.79.547C20.709 21.637 24 17.324 24 12.25 24 5.896 18.854.75 12.5.75Z\"></path>\r\n          </svg>\r\n        </>\r\n      }\r\n      description={\"暂无数据\"}\r\n      wrapperClassName=\"card-body d-flex align-items-center flex-column mt-4\"\r\n    ></EmptyNotice>\r\n  </div>\r\n);","no-spacing#No Spacing":"Show Code\nimport React from \"react\"; \r\nimport EmptyNotice from \"pocko-ui/EmptyNotice\";\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <EmptyNotice\r\n      description={\"暂无数据\"}\r\n      descriptionWrapperClassName=\"\"\r\n    ></EmptyNotice>\r\n  </div>\r\n);","api#API":"","emptynotice#EmptyNotice":"import EmptyNotice from \"pocko-ui/EmptyNotice\";\nProperty\tType\tDefault\tDescription\tRequired\twrapperClassName\tstring\t-\tThe class name of the control wrapper. You can pass a custom class name to modify the outer container’s styling.\t-\tdescription\tReact.ReactNode | string\t-\tThe description content, which can be a string or any ReactNode element (e.g., JSX elements, components).\t✔\tdescriptionWrapperClassName\tstring\tmt-4\tThe class name for the wrapper of the description. You can pass a custom class to modify its styling. Default is \"mt-4\".\t-\timage\tReact.ReactNode | string\t-\tThe image to display. It can be a ReactNode (e.g., JSX element or component) or a string (URL of the image). If not passed, a default SVG is shown.\t-\timageStyle\tReact.CSSProperties\t-\tInline styles for the image or SVG icon. This can be used to customize the appearance of the image element (e.g., size, position, etc.).\t-"}},"/Other/Popovers.html":{"title":"Popovers","data":{"general#General":"Popovers\r\nThe floating card pops up when clicking an element.\nShow Code\n  import React from \"react\";\r\n  import Popovers from \"pocko-ui/Popovers\";\r\n  \r\n  return (\r\n    <div className=\"mt-4\">\r\n      <Popovers\r\n        ref={popoverRef}\r\n        modalBodyHeight=\"\" // 弹出框高度\r\n        modalBodyWidth=\"\" // 弹出框宽度\r\n        content={\r\n          <button className=\"btn btn-sm btn-primary text-dark\" type=\"button\">\r\n            test\r\n          </button>\r\n        }\r\n        triggerShow={true}\r\n      >\r\n        <h2>This is Popovers' content</h2>\r\n      </Popovers>\r\n    </div>\r\n  );\r\n);","customize-height-or-width#Customize Height or Width":"Show Code\nimport React from \"react\";\r\nimport Popovers from \"pocko-ui/Popovers\";\r\n\r\nreturn (\r\n  <div class=\"d-flex align-items-center gap-4\">\r\n    <Popovers\r\n      modalBodyHeight=\"100\" // 弹出框高度\r\n      modalBodyWidth=\"100\" // 弹出框宽度\r\n      content={\r\n        <button className=\"btn btn-sm btn-primary text-dark\" type=\"button\">\r\n          100px\r\n        </button>\r\n      }\r\n      triggerShow={true}\r\n    >\r\n      <h2>Width: 100px</h2>\r\n      <h2>Height: 100px</h2>\r\n    </Popovers>\r\n\r\n    <Popovers\r\n      modalBodyHeight=\"300\" // 弹出框高度\r\n      modalBodyWidth=\"300\" // 弹出框宽度\r\n      content={\r\n        <button className=\"btn btn-sm btn-info\" type=\"button\">\r\n          300px\r\n        </button>\r\n      }\r\n      triggerShow={true}\r\n    >\r\n      <h2>Width: 300px</h2>\r\n\r\n      <h2>Height: 300px</h2>\r\n    </Popovers>\r\n  </div>\r\n);","api#API":"","popovers#Popovers":"import Popovers from \"pocko-ui/Popovers\";\r\nimport 'pocko-ui/Popovers/index.css'\nProperty\tType\tDefault\tDescription\tRequired\tchildren\tReactNode\t-\tThe content to be displayed inside the popover. This can be any valid ReactNode (e.g., text, components, elements).\t✔\tmodalBodyHeight\tstring\t-\tThe height of the modal body (popover content area). This should be a string representing a valid CSS height value (e.g., '200px').\t✔\tmodalBodyWidth\tstring\t-\tThe width of the modal body (popover content area). This should be a string representing a valid CSS width value (e.g., '300px').\t✔\tcontent\tstring | ReactNode\t-\tThe initial content displayed as the trigger for the popover. It can be a string or a ReactNode (e.g., a button or text).\t✔\ttriggerShow\tBoolean\t-\tA boolean flag to control whether the popover should be toggled open or closed on click.\t✔\texternalClassName\tany[]\t-\tAn array of external class names to handle clicks outside the popover, ensuring that the popover is not closed when clicking on certain elements.\tNo\tcloseFunc\tFunction | any\t-\tA callback function triggered when the popover is closed. This function is called in the useEffect when the popover is closed.\tNo"}},"/Navigation/DropdownMenu.html":{"title":"Dropdown Menu","data":{"general#General":"Dropdown Menu\r\nWhen there are more than a few options to choose from, you can wrap them in a Dropdown. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.\nShow Code\nimport React, { useState } from \"react\"; \r\nimport DropdownMenu from \"pocko-ui/DropdownMenu\";\r\n\r\nconst [triggerValue, setTriggerValue] = useState<any>(\"请选择\");\r\n\r\nreturn (\r\n  <div className=\"mt-2\">\r\n    <div className=\"d-flex align-items-center gap-2\">\r\n      <span>Click：</span>\r\n\r\n      <DropdownMenu\r\n        menuItems={[\r\n          {\r\n            label: `下拉文件 <i class=\"fa-solid fa-caret-down\"></i>`,\r\n            value: \"下拉文件\",\r\n          },\r\n          { label: \"打开文件\", divided: true, value: \"打开文件\" },\r\n          { label: \"退出\", disabled: true, value: \"789\" },\r\n        ]}\r\n        trigger=\"click\"  // How to trigger\r\n        triggerButton={\r\n          <button className=\"btn btn-sm btn-primary text-dark\" type=\"button\">\r\n            {triggerValue}\r\n          </button>\r\n        }\r\n        placement=\"bottomLeft\"\r\n        onChange={(item: any) => {\r\n          console.log(item);\r\n\r\n          setTriggerValue(item.value);\r\n        }}\r\n      ></DropdownMenu>\r\n    </div>\r\n\r\n    <div className=\"border-bottom my-2\"></div>\r\n\r\n    <div className=\"d-flex align-items-center\">\r\n      <span>hover：</span>\r\n\r\n      <DropdownMenu\r\n        menuItems={[\r\n          {\r\n            label: `文件1`,\r\n            value: \"文件1\",\r\n          },\r\n          { label: \"文件2\", divided: true, value: \"文件2\" },\r\n          { label: \"文件3\", disabled: true, value: \"文件3\" },\r\n        ]}\r\n        trigger=\"hover\"  // How to trigger\r\n        triggerButton={\r\n          <div>\r\n            <i className=\"fa-solid fa-folder-open\"></i>\r\n          </div>\r\n        }\r\n        placement=\"bottomLeft\"\r\n        onChange={(item: any) => {\r\n          console.log(item);\r\n          setTriggerValue(item.value);\r\n        }}\r\n      ></DropdownMenu>\r\n    </div>\r\n  </div>\r\n);","combine-drop-down-input#Combine drop-down input":"Show Code\nimport React, { useState } from \"react\"; \r\nimport DropdownMenu from \"pocko-ui/DropdownMenu\";\r\n\r\nconst [triggerValue, setTriggerValue] = useState<any>(\"请选择\");\r\n\r\nreturn (\r\n  <div className=\"mt-2\">\r\n    <div className=\"input-group\">\r\n      <span className=\"input-group-text\">\r\n        <DropdownMenu\r\n          menuItems={[\r\n            {\r\n              label: `下拉文件 <i class=\"fa-solid fa-caret-down\"></i>`,\r\n              value: \"下拉文件\",\r\n            },\r\n            { label: \"打开文件\", divided: true, value: \"打开文件\" },\r\n            { label: \"退出\", disabled: true, value: \"789\" },\r\n          ]}\r\n          trigger=\"hover\" // How to trigger\r\n          triggerButton={<div> {triggerValue}</div>}\r\n          placement=\"bottomLeft\"\r\n          onChange={(item) => {\r\n            console.log(item);\r\n\r\n            setTriggerValue(item.value);\r\n          }}\r\n        ></DropdownMenu>\r\n      </span>\r\n\r\n      <input type=\"text\" className=\"form-control\" />\r\n    </div>\r\n  </div>\r\n);","api#API":"","dropdown-menu#Dropdown Menu":"import DropdownMenu from \"pocko-ui/DropdownMenu\";\r\nimport 'pocko-ui/DropdownMenu/index.css'\nProperty\tType\tDefault\tDescription\tRequired\ttriggerButton\tReact.ReactNode\t-\tThe button or element that triggers the dropdown menu when clicked or hovered.\t✔\tmenuItems\tMenuItem[]\t-\tThe list of menu items to be displayed in the dropdown. Each item is an object containing label, value, disabled, and optionally divided properties.\t✔\tonChange\tFunction\t-\tCallback function that is called when a menu item is selected. Receives the selected menu item as an argument.\t-\tdisabled\tboolean\tfalse\tWhether the dropdown is disabled, preventing interaction with the dropdown and its trigger.\t-\tplacement\t\"bottomLeft\" | \"bottomRight\" | \"topLeft\" | \"topRight\"\tbottomLeft\tDetermines the position of the dropdown relative to the trigger button.\t-\ttrigger\t\"hover\" | \"click\"\thover\tDefines the trigger action for the dropdown. It can either open on hover or click.\t-\twrapperClassName\tstring\t-\tThe class name of the wrapper element around the trigger button.\t-\tcloseOnOutsideClick\tboolean\ttrue\tWhether to close the dropdown when clicking outside the dropdown or trigger button.\t-"}},"/Web-Elements/ModalDialog.html":{"title":"Modal Dialog","data":{"general#General":"Modal Dialog\r\nAllows user to interact with it before they can go back to using the parent application.\nShow Code\nimport React from \"react\";\r\nimport ModalDialog from \"pocko-ui/ModalDialog\";\r\n\r\nconst maskRef = useRef<any>(null)\r\n\r\nreturn (\r\n  <>\r\n    <ModalDialog\r\n      ref={maskRef}\r\n      onSubmit={() => {\r\n        console.log(\"点击确定\");\r\n      }}\r\n      onClose={() => {\r\n        console.log(\"点击取消\");\r\n      }}\r\n      heading=\"modal dialog\"\r\n      triggerContent={\r\n        <button className=\"btn btn-sm btn-primary mt-4\">Open Modal</button>\r\n      }\r\n    >\r\n      <div>This is ModalDialog Content</div>\r\n    </ModalDialog>\r\n  </>\r\n);","custom-height#Custom Height":"You can set the height of the Modal-Dialog, with the default unit being vh\nShow Code\nimport React from \"react\";\r\nimport ModalDialog from \"pocko-ui/ModalDialog\";\r\n\r\nconst maskRef = useRef<any>(null)\r\n\r\nreturn (\r\n  <>\r\n    <ModalDialog\r\n      ref={maskRef}\r\n      onSubmit={() => {\r\n        console.log(\"点击确定\");\r\n      }}\r\n      onClose={() => {\r\n        console.log(\"点击取消\");\r\n      }}\r\n      heading=\"modal dialog\"\r\n      modalBodyHeight=\"70\"\r\n      triggerContent={\r\n        <button className=\"btn btn-sm btn-primary\">Open Modal</button>\r\n      }\r\n    >\r\n      <div>This ModalDialog's height is 70vh</div>\r\n    </ModalDialog>\r\n  </>\r\n);","modal-dialog-width#Modal Dialog Width":"You can set the width of the Modal-Dialog, Use these 4 parameters: 'common' , 'lg' , 'xl', 'full'\nShow Code\nimport React from \"react\";\r\nimport ModalDialog from \"pocko-ui/ModalDialog\";\r\n\r\nconst mask1Ref = useRef<any>(null);\r\nconst mask2Ref = useRef<any>(null);\r\nconst mask3Ref = useRef<any>(null);\r\nconst mask4Ref = useRef<any>(null);\r\nconst [modalSize, setModalSize] = useState<any>(\"common\");\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"d-flex align-items-center gap-2\">\r\n      <ModalDialog\r\n        ref={mask1Ref}\r\n        onOpen={() => {\r\n          setModalSize(\"common\");\r\n        }}\r\n        onSubmit={() => {\r\n          console.log(\"点击确定\");\r\n        }}\r\n        onClose={() => {\r\n          console.log(\"点击取消\");\r\n        }}\r\n        modalSize={modalSize}\r\n        heading=\"modal dialog\"\r\n        triggerContent={\r\n          <button className=\"btn btn-sm btn-primary mt-4\">\r\n            Open Common Modal\r\n          </button>\r\n        }\r\n      >\r\n        <div>Width: {modalSize}</div>\r\n      </ModalDialog>\r\n\r\n      <ModalDialog\r\n        ref={mask2Ref}\r\n        onOpen={() => {\r\n          setModalSize(\"lg\");\r\n        }}\r\n        onSubmit={() => {\r\n          console.log(\"点击确定\");\r\n        }}\r\n        onClose={() => {\r\n          console.log(\"点击取消\");\r\n        }}\r\n        modalSize={modalSize}\r\n        heading=\"modal dialog\"\r\n        triggerContent={\r\n          <button className=\"btn btn-sm btn-primary mt-4\">\r\n            Open lg Modal\r\n          </button>\r\n        }\r\n      >\r\n        <div>Width: {modalSize}</div>\r\n      </ModalDialog>\r\n\r\n      <ModalDialog\r\n        ref={mask3Ref}\r\n        onOpen={() => {\r\n          setModalSize(\"xl\");\r\n        }}\r\n        onSubmit={() => {\r\n          console.log(\"点击确定\");\r\n        }}\r\n        onClose={() => {\r\n          console.log(\"点击取消\");\r\n        }}\r\n        modalSize={modalSize}\r\n        heading=\"modal dialog\"\r\n        triggerContent={\r\n          <button className=\"btn btn-sm btn-primary mt-4\">\r\n            Open xl Modal\r\n          </button>\r\n        }\r\n      >\r\n        <div>Width: {modalSize}</div>\r\n      </ModalDialog>\r\n\r\n      <ModalDialog\r\n        ref={mask4Ref}\r\n        onOpen={() => {\r\n          setModalSize(\"full\");\r\n        }}\r\n        onSubmit={() => {\r\n          console.log(\"点击确定\");\r\n        }}\r\n        onClose={() => {\r\n          console.log(\"点击取消\");\r\n        }}\r\n        modalSize={modalSize}\r\n        heading=\"modal dialog\"\r\n        triggerContent={\r\n          <button className=\"btn btn-sm btn-primary mt-4\">\r\n            Open full Modal\r\n          </button>\r\n        }\r\n      >\r\n        <div>Width: {modalSize}</div>\r\n      </ModalDialog>\r\n    </div>\r\n  </>\r\n);","custom-header-or-custom-footer#Custom Header or Custom Footer":"You can set your favorite header or favorite footer\nShow Code\nimport React from \"react\";\r\nimport ModalDialog from \"pocko-ui/ModalDialog\";\r\n\r\nconst maskRef = useRef<any>(null);\r\n\r\nreturn (\r\n  <>\r\n    <ModalDialog\r\n      modalRef={maskRef}\r\n      heading=\"modal dialog\"\r\n      triggerContent={\r\n        <button className=\"btn btn-sm btn-primary mt-4\">\r\n          Open Custom Header/Footer Modal\r\n        </button>\r\n      }\r\n      header={\r\n        <div className=\"modal-header\">\r\n          <button type=\"button\" className=\"btn btn-primary text-dark\">\r\n            自定义头部\r\n          </button>\r\n        </div>\r\n      }\r\n      footer={\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning\"\r\n            onClick={() => {\r\n              maskRef.current.close();\r\n            }}\r\n          >\r\n            自定义按钮1\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            style={{ color: \"black\" }}\r\n            onClick={() => {\r\n              maskRef.current.close();\r\n            }}\r\n          >\r\n            自定义按钮2\r\n          </button>\r\n        </div>\r\n      }\r\n    >\r\n      <div>Demo: Custom header/Footer</div>\r\n    </ModalDialog>\r\n  </>\r\n);","drag-or-drop#Drag or Drop":"You can drag the modal dialog to any position you want\nShow Code\nimport React from \"react\";\r\nimport ModalDialog from \"pocko-ui/ModalDialog\";\r\n\r\nconst maskRef = useRef<any>(null);\r\n\r\nreturn (\r\n  <>\r\n    <ModalDialog\r\n      modalRef={maskRef}\r\n      heading=\"modal dialog\"\r\n      triggerContent={\r\n        <button className=\"btn btn-sm btn-primary mt-4\">\r\n          Open Drag Modal\r\n        </button>\r\n      }\r\n      heading=\"Drag Modal\"\r\n    >\r\n      <div>Demo: Drag Modal</div>\r\n    </ModalDialog>\r\n  </>\r\n);","api#API":"","modal-dialog#Modal Dialog":"import ModalDialog from 'pocko-ui/ModalDialog';\nProperty\tType\tDefault\tDescription\tRequired\tref\tReact.ForwardedRef\t-\tIt exposes the following methods of the component:1.ref.current.open()2.ref.current.close()\t-\tzIndex\tnumber\t-\tSpecifies the z-index of the modal for stacking layers.\t-\theading\tstring\t-\tThe title of the modal.\t-\tmodalSize\t\"full\" | \"xl\" | \"lg\" | \"common\"\t'common'\tSpecifies the size of the modal. Acceptable values: 'full', 'xl', 'lg', 'common'.\t-\tmodalContentClassName\tstring\t-\tCustom class name for the modal content wrapper.\t-\tmodalHeaderClassName\tstring\t-\tCustom class name for the modal header.\t-\tmodalBodyClassName\tstring\t-\tCustom class name for the modal body.\t-\tmodalFooterClassName\tstring\t-\tCustom class name for the modal footer.\t-\tchildren\tReactNode\t-\tThe content to be displayed inside the modal body.\t-\theader\tReactNode\t-\tCustom header content for the modal.\t-\tfooter\tReactNode\t-\tCustom footer content for the modal.\t-\tonOpen\tFunction\t-\tA function that is triggered when the modal is opened.\t-\tonSubmit\tFunction\t-\tA function that is triggered when the submit button is clicked.\t-\tmodalBodyHeight\tstring\t'auto'\tCustom height for the modal body.\t-\toperationName\tstring\t'确认'\tThe text displayed on the button in the modal footer (e.g., 'Confirm').\t-\tonClose\tFunction\t-\tA function that is triggered when the modal is closed.\t-\ttriggerContent\tReactNode\t-\tThe content or element that triggers the modal when clicked.\t-\ttriggerClassName\tstring\t-\tThe class name for the trigger element, to customize its appearance.\t-\tuseDraggable\tboolean\tfalse\tWhether the modal is draggable.\t-"}},"/Web-Elements/SelectInput.html":{"title":"SelectInput","data":{"general#General":"SelectInput\r\nA retrievable dropdown menu used to display options.\nShow Code\nimport React, { useState } from \"react\";\r\nimport SelectInput from \"pocko-ui/SelectInput\";\r\n\r\nconst dropdown: any = [\r\n    {id: 1, name: '1', value: '1'},\r\n    {id: 2, name: '2', value: '2'},\r\n    {id: 3, name: '3', value: '3'}\r\n]\r\n\r\nconst [defaultValue, setDefaultValue] = useState<any>('')\r\nconst [defaultValue2, setDefaultValue2] = useState<any>('')\r\nconst [defaultValue3, setDefaultValue3] = useState<any>('')\r\n\r\n<SelectInput\r\n    id=\"id\"\r\n    name=\"name\"\r\n    dropdownRender={dropdown}\r\n    inputId={\"demo1-input-id\"}\r\n    titleId={\"demo1-title-id\"}\r\n    onChange={(i: any) => {\r\n        console.log(i);\r\n        setDefaultValue(i.value)\r\n    }}\r\n></SelectInput>\r\n\r\n<SelectInput\r\n  id=\"id\"\r\n  name=\"name\"\r\n  dropdownRender={dropdown}\r\n  inputId={\"demo1_2-input-id\"}\r\n  titleId={\"demo1_2-title-id\"}\r\n  onChange={(i: any) => {\r\n    setDefaultValue2(i.value);\r\n  }}\r\n  defaultValue={defaultValue2}\r\n  wrapperClassName=\"mt-2\"\r\n  cleanTrigger={{\r\n    valid: true,\r\n    cleanValueLabel: \"Clean\",\r\n    cleanFunc: () => {\r\n      setDefaultValue2(\"\");\r\n    },\r\n  }}\r\n></SelectInput>\r\n\r\n<SelectInput\r\n  id=\"id\"\r\n  name=\"name\"\r\n  dropdownRender={dropdown}\r\n  inputId={\"demo1_3-input-id\"}\r\n  titleId={\"demo1_3-title-id\"}\r\n  onChange={(i: any) => {\r\n    setDefaultValue3(i.value);\r\n  }}\r\n  defaultValue={defaultValue3}\r\n  wrapperClassName=\"mt-2\"\r\n  cleanTrigger={{\r\n    valid: true,\r\n    cleanValueLabel: \"Clean\",\r\n    cleanFunc: () => {\r\n      setDefaultValue3(\"\");\r\n    },\r\n  }}\r\n  manualSearchTrigger={true}  // When true, disables automatic search on focus or initialization; search must be triggered manually.\r\n></SelectInput>","multiple-selection#Multiple Selection":"Multiple selection, selecting from existing items.\nShow Code\nimport React, { useState } from \"react\";\r\nimport SelectInput from \"pocko-ui/SelectInput\";\r\n\r\nconst dropdown: any = [\r\n    {id: 1, name: '1', value: '1'},\r\n    {id: 2, name: '2', value: '2'},\r\n    {id: 3, name: '3', value: '3'}\r\n]\r\nconst [defaultValue, setDefaultValue] = useState<any[]>([]) // *** the type must be array\r\n\r\n<SelectInput\r\n    id=\"id\"\r\n    name=\"name\"\r\n    dropdownRender={dropdown}\r\n    inputId={\"demo2-input-id\"}\r\n    titleId={\"demo2-title-id\"}\r\n    onChange={(i: any) => {\r\n        console.log(i);\r\n\r\n        setDefaultValue(i)\r\n    }}\r\n    defaultValue={defaultValue}\r\n    wrapperClassName=\"mt-2\"\r\n></SelectInput>","choose-dropdown-position#Choose Dropdown Position":"Select the location where the dropdown box appears\nShow Code\nimport React, { useState } from \"react\";\r\nimport SelectInput from \"pocko-ui/SelectInput\";\r\n\r\nconst dropdown: any = [\r\n    {id: 1, name: '1', value: '1'},\r\n    {id: 2, name: '2', value: '2'},\r\n    {id: 3, name: '3', value: '3'}\r\n]\r\nconst [defaultValue, setDefaultValue] = useState<any>('')\r\n\r\n<SelectInput\r\n  label=\"Top\"\r\n  type=\"COMMON\"\r\n  id=\"id\"\r\n  name=\"name\"\r\n  dropdownRender={dropdown}\r\n  inputId={\"demoTop-input-id\"}\r\n  titleId={\"demoTop-title-id\"}\r\n  onChange={(i: any) => {\r\n    console.log(i);\r\n\r\n    setDefaultValue(i.value ? i.value : i);\r\n  }}\r\n  defaultValue={defaultValue}\r\n  dropdownPosition=\"top\"\r\n></SelectInput>\r\n\r\n<SelectInput\r\n  label=\"Bottom\"\r\n  type=\"COMMON\"\r\n  id=\"id\"\r\n  name=\"name\"\r\n  dropdownRender={dropdown}\r\n  inputId={\"demoBottom-input-id\"}\r\n  titleId={\"demoBottom-title-id\"}\r\n  onChange={(i: any) => {\r\n    console.log(i);\r\n\r\n    setDefaultValue(i.value ? i.value : i);\r\n  }}\r\n  defaultValue={defaultValue}\r\n  wrapperClassName=\"my-2\"\r\n  dropdownPosition=\"bottom\"\r\n></SelectInput>\r\n\r\n<SelectInput\r\n  label=\"Auto\"\r\n  type=\"COMMON\"\r\n  id=\"id\"\r\n  name=\"name\"\r\n  dropdownRender={dropdown}\r\n  inputId={\"demoAuto-input-id\"}\r\n  titleId={\"demoAuto-title-id\"}\r\n  onChange={(i: any) => {\r\n    console.log(i);\r\n\r\n    setDefaultValue(i.value ? i.value : i);\r\n  }}\r\n  defaultValue={defaultValue}\r\n  dropdownPosition=\"auto\"\r\n></SelectInput>","input-value-as-selected-value#Input Value as Selected Value":"Using the input value as the selected value\nShow Code\nimport React, { useState } from \"react\";\r\nimport SelectInput from \"pocko-ui/SelectInput\";\r\n\r\nconst dropdown: any = [\r\n    {id: 1, name: '1', value: '1'},\r\n    {id: 2, name: '2', value: '2'},\r\n    {id: 3, name: '3', value: '3'}\r\n]\r\nconst [defaultValue, setDefaultValue] = useState<any>('')\r\n\r\n<SelectInput\r\n    type=\"COMMON\"\r\n    id=\"id\"\r\n    name=\"name\"\r\n    dropdownRender={dropdown}\r\n    inputId={\"demo3-input-id\"}\r\n    titleId={\"demo3-title-id\"}\r\n    onChange={(i: any) => {\r\n        console.log(i);\r\n\r\n        if(i) {\r\n           setDefaultValue(i.value)\r\n        } else {\r\n           setDefaultValue(i)\r\n        }\r\n    }}\r\n    defaultValue={defaultValue}\r\n    isHandleInput={true}\r\n></SelectInput>","customize-option-content#Customize Option Content":"You can customize the content of the dropdown options\nShow Code\nimport React, { useState } from \"react\";\r\nimport SelectInput from \"pocko-ui/SelectInput\";\r\n\r\nconst dropdown: any = [\r\n  { id: 1, name: \"OIE19022\", age: \"20\" },\r\n  { id: 2, name: \"OIE19061\", age: \"22\" },\r\n  { id: 3, name: \"SWE19048\", age: \"21\" },\r\n];\r\n\r\nconst [defaultValue, setDefaultValue] = useState<any>(\"\");\r\n\r\n<SelectInput\r\n  type=\"COMMON\"\r\n  id=\"id\"\r\n  name=\"name\"\r\n  dropdownRender={dropdown}\r\n  inputId={\"demo4-custom-input-id\"}\r\n  titleId={\"demo4-custom-title-id\"}\r\n  onChange={(i: any) => {\r\n    console.log(i);\r\n\r\n    setDefaultValue(i.name);\r\n  }}\r\n  defaultValue={defaultValue}\r\n  renderOption={(item: any) => (\r\n    <>\r\n      <span>{item.name}</span>\r\n      <small className=\"d-flex flex-wrap align-items-center gap-1 text-secondary-emphasis anes-bill-justify-between\">\r\n        <span>id：{item.id}</span>\r\n        <span>age{item.age}</span>\r\n      </small>\r\n    </>\r\n  )}\r\n  manualSearchTrigger={false}\r\n></SelectInput>","api#API":"","selectinput#SelectInput":"import SelectInput from 'pocko-ui/SelectInput';\r\nimport 'pocko-ui/SelectInput/index.css'\nProperty\tType\tDefault\tDescription\tRequired\twrapperClassName\tstring\tposition: relative\tThe class name of the control wrapper.\t-\twrapperContentInputClassName\tstring\tposition: relative; form-control\tThe class name of the control.\t-\tpopupMenuClassName\tstring\tposition-absolute shadow border rounded...\tThe class name of the popup menu.\t-\tlable\tstring | React.ReactNode\t-\tCustomize left label render\t-\ttype\t\"COMMON\" | \"MULTI\"\t'COMMON'\tSet mode of Select\t-\tsize\tstring | any\t'auto'\tSet size of Select\t-\tid\tstring | any\t-\tThe ID of the object data.\t✔\tname\tstring | any\t-\tThe Name of the object data.\t✔\tkbcode\tstring | any\t'kb_code'\tThe keyboard code of the object data.\t-\tdropdownRender\tany[]\t-\tSelect options.\t✔\tdropdownPosition\t\"top\" | \"bottom\" | \"auto\"\t'auto'\tSelect the location where the dropdown appears.\t-\trenderOption\t(item: any) => React.ReactNode\t-\tFunction to customize how each option is rendered. Receives the item as a parameter.\t-\tinputId\tstring | any\t-\t❗  The inputId of the internal component, which identifies the uniqueness of the component.\t✔\ttitleId\tstring | any\t-\t❗  The titleId of the internal component, which identifies the uniqueness of the component.\t✔\tdefaultValue\tstring | any\t-\tInitial selected option.\t-\tcleanTrigger\tCleanTriggerConfig\t-\tConfiguration for the clear button at the top of the dropdown list. Contains:\t\t\t\t- valid: A boolean to enable or disable the clear button.\t\t\t\t- cleanValueLabel: Optional label for the clear button.\t\t\t\t- cleanFunc: Optional custom function to execute when the clear button is clicked.\t-\tindex\tstring | number | any\t-\tWhen using a list, determine which row the component is on in the list.\t-\tzIndex\tstring | any\t1101\tSet the depth value of the control to control the display of the pop-up layer appear above. Please set it when multiple controls are used at the same time.\t-\tonChange\tFunction\t-\tCalled when select an option or input value change.\t✔\tonKeyDown\tFunction | any\t-\tThe callback function that is triggered when keyboard is pressed.\t-\tisDisable\tboolean\tfalse\tWhether to disable the input.\t-\tisHandleInput\tboolean\tfalse\tUsing the input value as the selected value.\t-\tisDisableBodyScroll\tboolean\tfalse\tWhether disable the body scroll. *you need npm i body-scroll-lock*\t-\tdataService\tany\t-\tAdd a service class as a parameter to interact with external data sources or APIs.\t-\tdataServiceFunction\tstring\t-\tThe name of the function to be called from the service class.\t-\tdataServiceFunctionParams\tany[]\t-\tAn array of parameters for the function call. Important: If the array contains $QUERY_STRING, the entered value will be treated as a parameter and passed out.\t-\tdataServiceRetrieve\tboolean\tfalse\tIs this service class function a retrieval class. Important: If the field is set to true, the server's retrieval interface will be called every time the input is entered. If it is not set to true, the interface will only be called once when the mouse is clicked.\t-\tmanualSearchTrigger\tboolean\tfalse\tWhen set to true, disables automatic search on focus or initialization. Search must be triggered manually (e.g., by a button). Useful for scenarios like *input first, then search.*\t-"}},"/Web-Elements/Table.html":{"title":"Table","data":{"general#General":"Table\r\nA table displays rows of data.\nShow Code\nimport React, { useRef, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n} from \"pocko-ui/Table\";\r\n\r\n<Table tableClassName=\"table table-hover table-bordered table-striped align-middle\">\r\n  <TableHead>\r\n    <TableRow>\r\n      <TableCell>#</TableCell>\r\n      <TableCell>Title 1</TableCell>\r\n      <TableCell>Title 2</TableCell>\r\n      <TableCell>Title 3</TableCell>\r\n    </TableRow>\r\n  </TableHead>\r\n\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>1</TableCell>\r\n      <TableCell>Jason</TableCell>\r\n      <TableCell>Jason 2</TableCell>\r\n      <TableCell>Jason 3</TableCell>\r\n    </TableRow>\r\n\r\n    <TableRow>\r\n      <TableCell>2</TableCell>\r\n      <TableCell>Pray</TableCell>\r\n      <TableCell>Pray 2</TableCell>\r\n      <TableCell>Pray 3</TableCell>\r\n    </TableRow>\r\n\r\n    <TableRow>\r\n      <TableCell>3</TableCell>\r\n      <TableCell colSpan=\"2\">Neme</TableCell>\r\n      <TableCell>Neme 2</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>","cell-auto-width#Cell Auto Width":"The table displays data rows with adaptive width based on content\nShow Code\nimport React, { useRef, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n} from \"pocko-ui/Table\";\r\n\r\n<Table cellAutoWidth tableClassName=\"table table-hover table-bordered table-striped align-middle\">\r\n  <TableHead>\r\n    <TableRow>\r\n      <TableCell>#</TableCell>\r\n      <TableCell>Title 1</TableCell>\r\n      <TableCell>Title 2</TableCell>\r\n      <TableCell>Title 3</TableCell>\r\n    </TableRow>\r\n  </TableHead>\r\n\r\n  <TableBody>\r\n    <TableRow>\r\n      <TableCell>1</TableCell>\r\n      <TableCell>Jason</TableCell>\r\n      <TableCell>Jason 2</TableCell>\r\n      <TableCell>Jason 3</TableCell>\r\n    </TableRow>\r\n\r\n    <TableRow>\r\n      <TableCell>1</TableCell>\r\n      <TableCell>Jason</TableCell>\r\n      <TableCell>Jason 2</TableCell>\r\n      <TableCell>Jason 3-Jason 3-Jason 3-Jason 3</TableCell>\r\n    </TableRow>\r\n\r\n    <TableRow>\r\n      <TableCell>3</TableCell>\r\n      <TableCell colSpan=\"2\">Neme</TableCell>\r\n      <TableCell>Neme 2</TableCell>\r\n    </TableRow>\r\n  </TableBody>\r\n</Table>","sticky-table-headers#Sticky Table Headers":"Show Code [Index.scss]\n\r\n.table_className {\r\n  table-layout: auto;\r\n  width: max-content;\r\n  min-width: 100%;\r\n}\r\n\r\n.to-table-responsive_iframe {\r\n  overflow: auto;\r\n  width: 100%;\r\n  position: relative;\r\n\r\n  &::-webkit-scrollbar {\r\n    height: 15px;\r\n    width: 10px;\r\n    background-color: #e4e4e4;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #ccc;\r\n    border-radius: 10px;\r\n\r\n    &:hover {\r\n      background-color: #aaa;\r\n    }\r\n  }\r\n}\r\n\r\n Show Code [Index.tsx]\nimport React, { useRef, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n} from \"pocko-ui/Table\";\r\nimport './Index.scss'\r\n\r\n<div className=\"mt-4\" style={{height: '100px', overflow: 'scroll'}}>  \r\n  <Table cellAutoWidth tableClassName=\"table table-hover table-bordered table-striped align-middle\">\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell>#</TableCell>\r\n        <TableCell>Title 1</TableCell>\r\n        <TableCell>Title 2</TableCell>\r\n        <TableCell>Title 3</TableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n\r\n    <TableBody>\r\n      <TableRow>\r\n        <TableCell>1</TableCell>\r\n        <TableCell>Jason</TableCell>\r\n        <TableCell>Jason 2</TableCell>\r\n        <TableCell>Jason 3</TableCell>\r\n      </TableRow>\r\n\r\n      <TableRow>\r\n        <TableCell>1</TableCell>\r\n        <TableCell>Jason</TableCell>\r\n        <TableCell>Jason 2</TableCell>\r\n        <TableCell>Jason 3-Jason 3-Jason 3-Jason 3</TableCell>\r\n      </TableRow>\r\n\r\n      <TableRow>\r\n        <TableCell>3</TableCell>\r\n        <TableCell colSpan=\"2\">Neme</TableCell>\r\n        <TableCell>Neme 2</TableCell>\r\n      </TableRow>\r\n    </TableBody>\r\n  </Table>\r\n</div>","row-selection-multiple-rows#Row selection (multiple rows)":"Show Code\nimport React, { useRef, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n} from \"pocko-ui/Table\";\r\n\r\nimport Checkbox from \"pocko-ui/Checkbox\"; //other components\r\n\r\nconst testData: any = [\r\n  { id: \"1\", name: \"OIE19010\", friend: \"OIE19022\", condition: \"PERFECT\" },\r\n  { id: \"2\", name: \"OIE19022\", friend: \"OIE19061\", condition: \"PERFECT\" },\r\n  { id: \"3\", name: \"OIE19061\", friend: \"SWE19048\", condition: \"PERFECT\" },\r\n  { id: \"4\", name: \"SWE19048\", friend: \"OIE19010\", condition: \"PERFECT\" },\r\n];\r\n\r\nconst [tableData, setTableData] = useState<any[]>([]);\r\n\r\n// 多选\r\nfunction handleSelectAll() {\r\n  const isAllSelected = testData.every((item) =>\r\n    tableData.some((selectedItem: any) => selectedItem.id == item.id)\r\n  );\r\n\r\n  if (isAllSelected) {\r\n    setTableData([]);\r\n  } else {\r\n    const unselectedItems = testData.filter(\r\n      (item: any) => !tableData.some((selectedItem) => selectedItem.id == item.id)\r\n    );\r\n\r\n    setTableData((prevChoose: any) => [...prevChoose, ...unselectedItems]);\r\n  }\r\n}\r\n\r\n// 单选\r\nfunction isChoose(e: any, val: any) {\r\n  const index = tableData.findIndex((item: any) => item.id == val.id);\r\n\r\n  if (index != -1) {\r\n    const updatedChoose = [...tableData];\r\n    updatedChoose.splice(index, 1);\r\n\r\n    setTableData(updatedChoose);\r\n  } else {\r\n    setTableData((prevChoose: any) => [...prevChoose, val]);\r\n  }\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"mt-4 to-table-responsive_iframe\">\r\n      <Table tableClassName=\"table table-hover table-bordered table-striped align-middle\">\r\n        <TableHead className=\"sticky-top bg-white\">\r\n          <TableRow>\r\n            <TableCell>\r\n              <Checkbox\r\n                wrapperClassName=\"mb-0\"\r\n                onChange={handleSelectAll}\r\n                checked={tableData.length == testData.length}\r\n              />\r\n            </TableCell>\r\n            <TableCell>name</TableCell>\r\n            <TableCell>friend</TableCell>\r\n            <TableCell>condition</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n          {testData.map((v: any, i: any) => {\r\n            return (\r\n              <TableRow key={i}>\r\n                <TableCell>\r\n                  <Checkbox\r\n                    value={v}\r\n                    wrapperClassName=\"mb-0\"\r\n                    onChange={(e: any, val: any) => {\r\n                      isChoose(e, val);\r\n                    }}\r\n                    checked={tableData.some(\r\n                      (selectedItem: any) => selectedItem.id == v.id\r\n                    )}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>{v.name}</TableCell>\r\n                <TableCell>{v.friend}</TableCell>\r\n                <TableCell>{v.condition}</TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  </>\r\n);","api#API":"You could specify all remaining properties defined and all synthetic events from React on all components listed below. such as tabIndex, style, id, data-xxx, onClick, onMouseEnter, onMouseLeave, and so on.\n<Table />\n<TableHead />\n<TableBody />\n<TableRow />\n<TableCell />","table#Table":"import { Table } from 'pocko-ui/Table';\nProperty\tType\tDefault\tDescription\tRequired\ttableWrapperClassName\tstring\t-\tThe style name of the outer div of the table.\t-\ttableClassName\tstring\t'table'\tThe style name of the table.\t-\tcellAutoWidth\tboolean\t-\tWhether the table adjusts its width automatically.\t-\thover\tboolean\ttrue\tTo enable a hover state on table rows.\t-\tbordered\tboolean\ttrue\tWhether the table has borders.\t-\tchildren\tReact.ReactNode\t-\tThe content inside the table.\t✔","tablehead#TableHead":"import { TableHead } from 'pocko-ui/Table';\nProperty\tType\tDefault\tDescription\tRequired\tclassName\tstring\t-\tThe style name of the table head.\t-\tref\tReact.ForwardedRef\t-\tIt is the return element of this component.\t-","tablebody#TableBody":"import { TableBody } from 'pocko-ui/Table';\nProperty\tType\tDefault\tDescription\tRequired\tclassName\tstring\t-\tThe style name of the table body.\t-\tref\tReact.ForwardedRef\t-\tIt is the return element of this component.\t-","tablerow#TableRow":"import { TableRow } from 'pocko-ui/Table';\nProperty\tType\tDefault\tDescription\tRequired\tclassName\tstring\t-\tThe style name of the table body.\t-\tref\tstring\t-\tIt is the return element of this component.\t-\tactive\tboolean\t-\tWhether this cell row is highlight.\t-\tactiveName\tstring\t-\tThe style name of the table row highlight.\t-","tablecell#TableCell":"import { TableCell } from 'pocko-ui/Table';\nProperty\tType\tDefault\tDescription\tRequired\tclassName\tstring\t-\tThe style name of the table body.\t-\tactive\tboolean\t-\tWhether this cell row is highlight.\t-\tactiveName\tstring\t-\tThe style name of the table row highlight.\t-\tcolSpan\tnumber\t-\tThe value represents the number of columns to span.\t-\tscope\t\"col\" | \"row\" | \"colgroup\" | \"rowgroup\"\t-\tThe scope attribute specifies whether a header cell is a header for a column, row, or group of columns or rows.\t-\tonClick\tfunction\t-\tClick on the callback function of the cell.\t-"}},"/Web-Elements/ToolTips.html":{"title":"ToolTips","data":{"general#General":"ToolTips\r\nSimple text popup box.\nShow Code\nimport React from \"react\";\r\nimport ToolTips from \"pocko-ui/Tooltips\";\r\n\r\n<div className=\"mt-4\">\r\n    <div style={{ width: \"fit-content\" }}>\r\n        <ToolTips content=\"prompt text\">\r\n            <div className=\"link-primary\">The tooltip will be shown when the mouse enters.</div>\r\n        </ToolTips>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div style={{ width: \"fit-content\" }}>\r\n        <ToolTips content=\"prompt text\" position=\"top\">\r\n            <div className=\"link-primary\">The tooltip will be shown at the top when the mouse enters.</div>\r\n        </ToolTips>\r\n    </div>\r\n</div>","change-color#Change Color":"Show Code\nimport React from \"react\";\r\nimport ToolTips from \"pocko-ui/Tooltips\";\r\n\r\n<div className=\"mt-4\">\r\n    <div style={{ width: \"fit-content\" }}>\r\n      <ToolTips content=\"prompt text\" color=\"red\">\r\n        <div className=\"link-primary\">The red tooltip will be shown when the mouse enters.</div>\r\n      </ToolTips>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div style={{ width: \"fit-content\" }}>\r\n      <ToolTips content=\"prompt text\" color=\"#1E90FF\" position=\"top\">\r\n        <div className=\"link-primary\">The doderblue tooltip will be shown at the top when the mouse enters.</div>\r\n      </ToolTips>\r\n    </div>\r\n</div>","api#API":"","tooltips#ToolTips":"import ToolTips from 'pocko-ui/ToolTips';\r\nimport 'pocko-ui/ToolTips/index.css'\nProperty\tType\tDefault\tDescription\tRequired\tdelay\tnumber\t300\tThe delay (in milliseconds) before the pop-up layer appears.\t-\tcolor\tstring\t#000\tThe background color of the pop-up layer.\t-\tchildren\tReact.ReactNode\t-\tThe content to be displayed inside the pop-up layer.\t✔\tcontent\tstring\t-\tThe text or content to be shown when the pop-up layer is visible.\t✔\tposition\t\"top\" | \"bottom\" | 'right' | 'left'\t'bottom'\tThe position of the pop-up layer relative to the target element.\t-"}},"/Web-Elements/Trees.html":{"title":"Trees","data":{"general#General":"Trees\r\nMultiple-level structure list.\nShow Code\nimport React from \"react\";\r\nimport Trees from \"pocko-ui/Trees\";\r\nimport \"pocko-ui/Trees/index.css\";\r\n\r\nconst treesData = [\r\n  {\r\n    title: \"level_1\",\r\n    key: \"level 1\",\r\n    active: false,\r\n    child_count: 1,\r\n    children: [\r\n      {\r\n        title: \"level_1-1\",\r\n        key: \"level 1-1\",\r\n        active: true,\r\n        child_count: 1,\r\n        children: [\r\n          {\r\n            title: \"level_1-1-1\",\r\n            key: \"level 1-1-1\",\r\n          },\r\n          {\r\n            title: \"level_1-1-2\",\r\n            key: \"level 1-1-2\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"level_2\",\r\n    key: \"level 2\",\r\n    active: false,\r\n    child_count: 0,\r\n  },\r\n  {\r\n    title: \"level_3\",\r\n    key: \"level 3\",\r\n    active: false,\r\n    child_count: 0,\r\n  },\r\n];\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Trees\r\n      data={treesData}\r\n      id=\"title\"\r\n      name=\"key\"\r\n      hasChildrenFn={(item: any) => {\r\n        // You may replace child_count with your own indicator field.\r\n        return (\r\n          (item.child_count ?? 0) > 0 ||\r\n          (Array.isArray(item.children) && item.children.length > 0)\r\n        );\r\n      }}\r\n    ></Trees>\r\n  </div>\r\n);","push-some-expansion-buttons-to-each-item-of-the-tree#Push some expansion buttons to each item of the tree":"Show Code\nimport React from \"react\";\r\nimport Trees from \"pocko-ui/Trees\";\r\nimport \"pocko-ui/Trees/index.css\";\r\n\r\nconst treesData = [\r\n  {\r\n    title: \"level_1\",\r\n    key: \"level 1\",\r\n    active: false,\r\n    child_count: 1,\r\n    children: [\r\n      {\r\n        title: \"level_1-1\",\r\n        key: \"level 1-1\",\r\n        active: true,\r\n        child_count: 1,\r\n        children: [\r\n          {\r\n            title: \"level_1-1-1\",\r\n            key: \"level 1-1-1\",\r\n          },\r\n          {\r\n            title: \"level_1-1-2\",\r\n            key: \"level 1-1-2\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"level_2\",\r\n    key: \"level 2\",\r\n    active: false,\r\n    child_count: 0,\r\n  },\r\n  {\r\n    title: \"level_3\",\r\n    key: \"level 3\",\r\n    active: false,\r\n    child_count: 0,\r\n  },\r\n];\r\n\r\nconst createCustomContent = (node: any) => (\r\n  <div className=\"d-flex align-items-center gap-2 p-1 bg-body rounded\">\r\n    <i\r\n      className=\"fa-solid fa-circle-plus text-info\"\r\n      onClick={() => {\r\n        console.log(\r\n          \"You can add new node behind tree-node by your function\",\r\n          node\r\n        );\r\n      }}\r\n    ></i>\r\n\r\n    <i\r\n      className=\"fa-solid fa-pen mx-2 text-warning\"\r\n      onClick={() => {\r\n        console.log(\"You can edit this tree-node by your function\", node);\r\n      }}\r\n    ></i>\r\n\r\n    <i\r\n      className=\"fa-regular fa-trash-can text-danger\"\r\n      onClick={() => {\r\n        console.log(\"You can delete this tree-node by your function\", node);\r\n      }}\r\n    ></i>\r\n  </div>\r\n);\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Trees\r\n      data={treesData}\r\n      id=\"title\"\r\n      name=\"key\"\r\n      renderCustomContent={createCustomContent}\r\n      wrapperClassName={\"col-4\"}\r\n      hasChildrenFn={(item: any) => {\r\n        // You may replace child_count with your own indicator field.\r\n        return (\r\n          (item.child_count ?? 0) > 0 ||\r\n          (Array.isArray(item.children) && item.children.length > 0)\r\n        );\r\n      }}\r\n    />\r\n  </div>\r\n );","using-another-icon-to-show-expand#Using Another icon to Show Expand":"Show Code\nimport React from \"react\";\r\nimport Trees from \"pocko-ui/Trees\";\r\nimport \"pocko-ui/Trees/index.css\";\r\n\r\nconst treesData = [\r\n  {\r\n    title: \"level_1\",\r\n    key: \"level 1\",\r\n    active: false,\r\n    child_count: 1,\r\n    children: [\r\n      {\r\n        title: \"level_1-1\",\r\n        key: \"level 1-1\",\r\n        active: true,\r\n        child_count: 1,\r\n        children: [\r\n          {\r\n            title: \"level_1-1-1\",\r\n            key: \"level 1-1-1\",\r\n          },\r\n          {\r\n            title: \"level_1-1-2\",\r\n            key: \"level 1-1-2\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"level_2\",\r\n    key: \"level 2\",\r\n    active: false,\r\n    child_count: 0,\r\n  },\r\n  {\r\n    title: \"level_3\",\r\n    key: \"level 3\",\r\n    active: false,\r\n    child_count: 0,\r\n  },\r\n];\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Trees\r\n      data={treesData}\r\n      id=\"title\"\r\n      name=\"key\"\r\n      wrapperClassName={\"col-4\"}\r\n      hasChildrenFn={(item: any) => {\r\n        // You may replace child_count with your own indicator field.\r\n        return (\r\n          (item.child_count ?? 0) > 0 ||\r\n          (Array.isArray(item.children) && item.children.length > 0)\r\n        );\r\n      }}\r\n      // The icon to display for nodes that do not have children\r\n      leafIcon={\r\n        <svg\r\n          width=\"0.75em\"\r\n          height=\"0.75em\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <path d=\"M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2l144 0c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48l-97.5 0c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3l0-38.3 0-48 0-24.9c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192l64 0c17.7 0 32 14.3 32 32l0 224c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32L0 224c0-17.7 14.3-32 32-32z\" />\r\n        </svg>\r\n      }\r\n      arrowIcons={[\r\n        <svg\r\n          width=\"0.75em\"\r\n          height=\"0.75em\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 576 512\"\r\n        >\r\n          <path d=\"M575.8 255.5c0 18-15 32.1-32 32.1l-32 0 .7 160.2c0 2.7-.2 5.4-.5 8.1l0 16.2c0 22.1-17.9 40-40 40l-16 0c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1L416 512l-24 0c-22.1 0-40-17.9-40-40l0-24 0-64c0-17.7-14.3-32-32-32l-64 0c-17.7 0-32 14.3-32 32l0 64 0 24c0 22.1-17.9 40-40 40l-24 0-31.9 0c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2l-16 0c-22.1 0-40-17.9-40-40l0-112c0-.9 0-1.9 .1-2.8l0-69.7-32 0c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z\" />\r\n        </svg>,\r\n        <svg\r\n          width=\"0.75em\"\r\n          height=\"0.75em\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 448 512\"\r\n        >\r\n          <path d=\"M224 0c-17.7 0-32 14.3-32 32l0 19.2C119 66 64 130.6 64 208l0 18.8c0 47-17.3 92.4-48.5 127.6l-7.4 8.3c-8.4 9.4-10.4 22.9-5.3 34.4S19.4 416 32 416l384 0c12.6 0 24-7.4 29.2-18.9s3.1-25-5.3-34.4l-7.4-8.3C401.3 319.2 384 273.9 384 226.8l0-18.8c0-77.4-55-142-128-156.8L256 32c0-17.7-14.3-32-32-32zm45.3 493.3c12-12 18.7-28.3 18.7-45.3l-64 0-64 0c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7z\" />\r\n        </svg>,\r\n      ]}\r\n    />\r\n  </div>\r\n);","use-the-exposed-method-to-expand-or-update-the-tree#Use the exposed method to expand or update the tree":"Show Code\nimport React from \"react\";\r\nimport Trees from \"pocko-ui/Trees\";\r\nimport \"pocko-ui/Trees/index.css\";\r\n\r\nconst treesData = [\r\n  {\r\n    title: \"level_1\",\r\n    key: \"level 1\",\r\n    active: false,\r\n    children: [\r\n      {\r\n        title: \"level_1-1\",\r\n        key: \"level 1-1\",\r\n        active: true,\r\n        children: [\r\n          {\r\n            title: \"level_1-1-1\",\r\n            key: \"level 1-1-1\",\r\n            children: [],\r\n          },\r\n          {\r\n            title: \"level_1-1-2\",\r\n            key: \"level 1-1-2\",\r\n            children: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"level_2\",\r\n    key: \"level 2\",\r\n    active: false,\r\n    children: [],\r\n  },\r\n  {\r\n    title: \"level_3\",\r\n    key: \"level 3\",\r\n    active: false,\r\n    children: [],\r\n  },\r\n];\r\n\r\nconst treesRef = useRef();\r\n\r\nconst handleAdd = (node) => {\r\n  // add node\r\n  treesRef.current?.updatedTreeNode(node.title, {\r\n    child_count: (node.child_count || 0) + 1,\r\n    children: [\r\n      ...node.children,\r\n      {\r\n        title: \"level_add_add\",\r\n        key: \"level add_add\",\r\n        children: [],\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nconst handleDelete = (node) => {\r\n  // delete node\r\n  treesRef.current?.updatedTreeNode(node.title, \"DELETE\");\r\n\r\n  // find parent node and update child_count\r\n  const result = treesRef.current?.findNodeWithParentById(node.title);\r\n  if (result?.parent) {\r\n    const parent = result.parent;\r\n    treesRef.current.updatedTreeNode(parent.title, {\r\n      child_count: Math.max((parent.child_count ?? 1) - 1, 0),\r\n    });\r\n  }\r\n};\r\n\r\nconst createCustomContent = (node) => (\r\n  <div className=\"d-flex align-items-center gap-2 p-1 bg-body rounded\">\r\n    <i\r\n      className=\"fa-solid fa-circle-plus text-info\"\r\n      onClick={() => handleAdd(node)}\r\n    ></i>\r\n\r\n    <i\r\n      className=\"fa-regular fa-trash-can text-danger\"\r\n      onClick={() => handleDelete(node)}\r\n    ></i>\r\n  </div>\r\n);\r\n\r\nreturn (\r\n  <div className=\"mt-4\">\r\n    <Trees\r\n      treesRef={treesRef}\r\n      data={treesData}\r\n      id=\"title\"\r\n      name=\"key\"\r\n      wrapperClassName={\"col-4\"}\r\n      renderCustomContent={createCustomContent}\r\n      hasChildrenFn={(item) =>\r\n        (item.child_count ?? 0) > 0 ||\r\n        (Array.isArray(item.children) && item.children.length > 0)\r\n      }\r\n    />\r\n  </div>\r\n);","api#API":"","trees#Trees":"import Trees from \"pocko-ui/Trees\";\r\nimport \"pocko-ui/Trees/index.css\"\nProperty\tType\tDefault\tDescription\tRequired\twrapperClassName\tstring\t-\tThe class name for the outer wrapper of the control.\t-\ttreesRef\tany\t-\tA reference to the component, which allows accessing and calling internal functions via useImperativeHandle.\t-\tid\tstring\t-\tThe field name in each node that uniquely identifies it.\t✔\tname\tstring\t-\tThe field name that holds the display label shown in the tree.\t✔\tdata\tany[]\t-\tAn array of data objects associated with the tree nodes.\t✔\tdefaultId\tany\t-\tThe ID of the default selected tree node.\t-\ttreeDataItemClick\tFunction\t-\tA callback function triggered when a tree node is clicked.\t-\trenderCustomContent\tFunction\t-\tA function that renders custom content (such as buttons or additional information) for each tree node.\t-\tdataService\tany\t-\tAdd a service class as a parameter to interact with external data sources or APIs.\t-\tdataServiceFunction\tstring\t-\tThe name of the function to be called from the service class.\t-\tdataServiceFunctionParams\tany[]\t-\tAn array of parameters for the function call. Important: If the array contains $QUERY_STRING, the entered value will be treated as a parameter and passed out.\t-\tleafIcon\tReact.ReactNode\t-\tThe icon to display for nodes that do not have children (i.e., leaf nodes). If not provided, no icon is shown.\t-\tarrowIcons\tReact.ReactNode[]\t-\tAn array containing one or two icons used to indicate node expand/collapse states. One icon will rotate; two icons toggle.\t-\thasChildrenFn\t(node: any) => boolean\t-\tA function used to determine whether a node has children. Should return true if the node is expandable.\t-","ref-methods-api#Ref Methods API":"The Trees component exposes several methods via the treesRef prop using useImperativeHandle. These methods allow you to update or query the internal state of the tree externally.\nMethod Name\tParameters\tDescription\tupdatedTreeNode(id, value)\tid: string | numbervalue: object | 'DELETE'\tUpdates a specific node’s data, or removes the node if value is 'DELETE'.\tfindNodeWithParentById(id)\tid: string | number\tRecursively finds the node and its direct parent. Returns { node, parent }.\tgetTreeData()\t(none)\tReturns the current full tree data (useful for snapshot or syncing).\t\nUsage Example\nconst treesRef = useRef();\r\n\r\n// ✅ Delete a node\r\ntreesRef.current?.updatedTreeNode(nodeId, 'DELETE');\r\n\r\n// ✅ Update a node’s label and child count\r\ntreesRef.current?.updatedTreeNode(nodeId, {\r\n  title: 'Renamed Node',\r\n  child_count: 2,\r\n});\r\n\r\n// ✅ Find node and its parent\r\nconst result = treesRef.current?.findNodeWithParentById(nodeId);\r\nif (result) {\r\n  const { node, parent } = result;\r\n  console.log('Node:', node, 'Parent:', parent);\r\n}\r\n\r\n// ✅ Get current tree data\r\nconst fullTree = treesRef.current?.getTreeData();"}}}